name: Build & Deploy

on:
  push:
    branches:
      - main

env:
  IMAGE_NAMESPACE: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
  build:
    runs-on: ubuntu-latest
    environment: prod

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
        id: setup-buildx

      - name: Cache
        uses: actions/cache@v4
        id: cache
        with:
          path: cache-mount
          key: cache-mount-${{ hashFiles('Dockerfile') }}

      - name: Restore Docker cache mounts
        uses: reproducible-containers/buildkit-cache-dance@v3
        with:
          builder: ${{ steps.setup-buildx.outputs.name }}
          cache-dir: cache-mount
          dockerfile: Dockerfile
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build backend
        uses: docker/build-push-action@v4
        with:
          context: .
          target: backend
          push: true
          tags: ${{ env.IMAGE_NAMESPACE }}/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build proxy
        uses: docker/build-push-action@v4
        with:
          context: .
          target: proxy
          push: true
          tags: ${{ env.IMAGE_NAMESPACE }}/proxy:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            STORE_SUFFIX=${{ vars.STORE_SUFFIX }}
            DOMAIN=${{ vars.DOMAIN }}

      - name: Build cache
        uses: docker/build-push-action@v4
        with:
          context: .
          target: cache
          push: true
          tags: ${{ env.IMAGE_NAMESPACE }}/cache:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: prod

    steps:
      - name: Copy docker-compose to server
        uses: appleboy/scp-action@v1
        with:
          host: ${{ vars.VPS_HOST }}
          username: ${{ vars.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose.yaml"
          target: "/srv/${{ github.event.repository.name }}/"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ vars.VPS_HOST }}
          username: ${{ vars.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /srv/${{ github.event.repository.name }}
            cat > .env <<EOF
            IMAGE_NAMESPACE=${{ env.IMAGE_NAMESPACE }}
            STORE_SUFFIX=${{ vars.STORE_SUFFIX }}
            ROOT_DB_NAME=${{ vars.ROOT_DB_NAME }}
            ATLAS_URI=${{ secrets.ATLAS_URI }}
            STORAGE_URI=${{ secrets.STORAGE_URI }}
            STORAGE_REGION=${{ vars.STORAGE_REGION }}
            STORAGE_USER=${{ secrets.STORAGE_USER }}
            STORAGE_PASSWORD=${{ secrets.STORAGE_PASSWORD }}
            STORAGE_BUCKET_NAME=${{ vars.STORAGE_BUCKET_NAME }}
            DOMAIN=${{ vars.DOMAIN }}
            ACME_EMAIL=${{ vars.ACME_EMAIL }}
            EOF
            docker compose --env-file .env pull
            docker compose --env-file .env up -d
