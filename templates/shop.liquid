<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>البحث - {{ store.name }}</title>
  <meta name="description" content="ابحث عن المنتجات في {{ store.name }}">
  {% include "style.liquid" %}

  <style>
    /* Shop Page Specific Styles */
    .search-header-section {
      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
      padding: 3rem 0;
      margin-bottom: 3rem;
      border-radius: 0 0 24px 24px;
    }

    .search-form-container {
      max-width: 800px;
      margin: 0 auto;
      text-align: center;
    }

    .search-form-main {
      margin-bottom: 2rem;
    }

    .search-input-group {
      display: flex;
      gap: 0.5rem;
      background: white;
      padding: 0.5rem;
      margin-left: 0.5rem;
      margin-right: 0.5rem;
      border-radius: 12px;
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
      border: 1px solid #e5e5e5;
    }

    .search-input-main {
      flex: 1;
      padding: 1rem;
      border: none;
      border-radius: 8px;
      font-size: 1rem;
      outline: none;
    }

    .search-btn-main {
      background: #ffd23d;
      color: #333;
      border: none;
      padding: 1rem 2rem;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      transition: all 0.2s ease;
    }

    .search-btn-main:hover {
      background: #333;
      color: white;
      transform: translateY(-2px);
    }

    .search-welcome h1 {
      font-size: 2.5rem;
      font-weight: 700;
      margin-bottom: 1rem;
      color: #333;
    }

    .search-welcome p {
      font-size: 1.1rem;
      color: #666;
    }

    .search-results-info h1 {
      font-size: 2rem;
      font-weight: 700;
      margin-bottom: 0.5rem;
      color: #333;
    }

    .results-count {
      font-size: 1.1rem;
      color: #666;
    }

    /* Suggestions */
    .search-suggestions-main {
      margin-bottom: 3rem;
    }

    #search-products-grid {
      margin-top: 0;
    }

    .suggestions-section,
    #search-products-grid,
    .featured-categories-search,
    .all-products-section {
      margin-bottom: 3rem;
    }

    .suggestions-section h2,
    .popular-searches h2,
    .featured-categories-search h2 {
      font-size: 1.5rem;
      font-weight: 600;
      margin-bottom: 1.5rem;
      color: #333;
    }

    .suggestion-pills {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      justify-content: center;
    }

    .suggestion-pill {
      background: white;
      color: #333;
      padding: 0.75rem 1.5rem;
      border-radius: 25px;
      text-decoration: none;
      border: 1px solid #e5e5e5;
      transition: all 0.2s ease;
      font-weight: 500;
    }

    .suggestion-pill:hover {
      background: #ffd23d;
      color: #333;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .popular-list {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      max-width: 300px;
      margin: 0 auto;
    }

    .popular-list a {
      color: #666;
      text-decoration: none;
      padding: 0.5rem 0;
      border-bottom: 1px solid #f0f0f0;
      transition: color 0.2s;
    }

    .popular-list a:hover {
      color: #ffd23d;
    }

    .categories-grid-search {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1.5rem;
    }

    .category-card-search {
      background: white;
      border: 1px solid #e5e5e5;
      border-radius: 12px;
      padding: 2rem;
      text-decoration: none;
      transition: all 0.3s ease;
      text-align: center;
    }

    .category-card-search:hover {
      transform: translateY(-4px);
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
    }

    .category-info-search h3 {
      color: #333;
      font-size: 1.1rem;
      font-weight: 600;
    }

    /* Search Results */
    .search-results {
      display: block;
      margin-top: 2rem;
    }

    .search-controls {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 1rem;
      background: #f8f9fa;
      border-radius: 12px;
      border: 1px solid #e5e5e5;
    }

    .search-filters-toggle {
      background: #333;
      color: white;
      border: none;
      padding: 0.75rem 1rem;
      border-radius: 8px;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-weight: 500;
      transition: all 0.2s ease;
    }

    .search-filters-toggle:hover {
      background: #ffd23d;
      color: #333;
    }

    .search-sort-section {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .search-sort-section label {
      font-weight: 500;
      color: #333;
    }

    #search-sort-select {
      padding: 0.5rem;
      border: 1px solid #ddd;
      border-radius: 6px;
      background: white;
      cursor: pointer;
    }

    .search-content {
      display: grid;
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    /* Loading and Error States */
    .loading-spinner {
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 3rem;
    }

    .spinner {
      width: 40px;
      height: 40px;
      border: 3px solid #f3f3f3;
      border-top: 3px solid #ffd23d;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }

    .error-message {
      text-align: center;
      padding: 2rem;
      color: #dc3545;
      background: #f8d7da;
      border-radius: 8px;
      margin: 1rem 0;
    }

    .no-results {
      text-align: center;
      padding: 3rem;
      color: #666;
    }

    .no-results h3 {
      margin-bottom: 1rem;
      color: #333;
    }

    /* Pagination */
    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 1rem;
      margin-top: 3rem;
    }

    .pagination-btn {
      padding: 0.75rem 1rem;
      background: white;
      border: 1px solid #e5e5e5;
      border-radius: 8px;
      text-decoration: none;
      color: #333;
      font-weight: 500;
      transition: all 0.2s ease;
      min-width: 40px;
      text-align: center;
      cursor: pointer;
    }

    .pagination-btn:hover:not([disabled]) {
      background: #ffd23d;
      color: #333;
      border-color: #ffd23d;
    }

    .pagination-btn.active {
      background: #333;
      color: white;
      border-color: #333;
    }

    .pagination-btn[disabled] {
      opacity: 0.5;
      cursor: not-allowed;
      pointer-events: none;
    }

    .pagination-dots {
      color: #666;
      font-weight: bold;
    }

    /* Mobile Responsive */
    @media (max-width: 768px) {
      .search-input-group {
        flex-direction: column;
      }

      .search-btn-main {
        justify-content: center;
      }

      .search-controls {
        flex-direction: column;
        gap: 1rem;
        align-items: stretch;
      }

      .search-sort-section {
        justify-content: space-between;
      }

      .suggestion-pills {
        justify-content: flex-start;
      }

      .pagination {
        gap: 0.5rem;
      }

      .pagination-btn {
        padding: 0.5rem 0.75rem;
        min-width: 35px;
      }
    }

    @media (max-width: 480px) {
      .search-header-section {
        padding: 2rem 0;
      }

      .search-welcome h1 {
        font-size: 2rem;
      }
    }
  </style>
</head>

<body>
  <div class="page">
    {% include "header.liquid" %}

    <main class="container">
      <!-- Search Header -->
      <div class="search-header-section">
        <div class="search-form-container">
          <form class="search-form-main" id="search-form">
            <div class="search-input-group">
              <input type="text" name="s" id="search-query-input" placeholder="ابحث عن المنتجات..."
                class="search-input-main" autocomplete="off" />
              <button type="submit" class="search-btn-main">
                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <circle cx="11" cy="11" r="8"></circle>
                  <path d="m21 21-4.35-4.35"></path>
                </svg>
                بحث
              </button>
            </div>
          </form>

          <!-- Dynamic headers -->
          <div class="search-results-info" id="search-results-info" style="display:none;">
            <h1 id="results-title">نتائج البحث</h1>
            <p class="results-count">تم العثور على <span id="results-count">0</span> منتج</p>
          </div>

          <div class="search-welcome" id="search-welcome">
            <h1>البحث في المتجر</h1>
            <p>ابحث عن المنتجات التي تحتاجها</p>
          </div>
        </div>
      </div>

      <!-- Suggestions (shown if no query) -->
      <div class="search-suggestions-main" id="search-suggestions">
        <div class="suggestions-section">
          <h2>اقتراحات البحث</h2>
          <div class="suggestion-pills">
            <a href="?s=ملابس" class="suggestion-pill">ملابس</a>
            <a href="?s=أحذية" class="suggestion-pill">أحذية</a>
            <a href="?s=إكسسوارات" class="suggestion-pill">إكسسوارات</a>
            <a href="?s=حقائب" class="suggestion-pill">حقائب</a>
            <a href="?s=ساعات" class="suggestion-pill">ساعات</a>
            <a href="?s=عطور" class="suggestion-pill">عطور</a>
          </div>
        </div>

        <!-- All Products Section -->
        <div class="all-products-section">
          <h2>جميع المنتجات</h2>

          <!-- Loading State -->
          <div class="loading-spinner" id="all-products-loading" style="display:none;">
            <div class="spinner"></div>
          </div>

          <!-- Error State -->
          <div class="error-message" id="all-products-error" style="display:none;">
            حدث خطأ في تحميل المنتجات. يرجى المحاولة مرة أخرى.
          </div>

          <!-- Products Grid -->
          <div class="products-grid" id="all-products-grid">
            <!-- Products will be rendered here -->
          </div>

          <!-- Pagination for all products -->
          <div class="pagination" id="all-products-pagination" style="display:none;">
            <!-- Pagination will be rendered here -->
          </div>
        </div>

        {% if store.featured_collections %}
        <div class="featured-categories-search">
          <h2>تصفح الفئات</h2>
          <div class="categories-grid">
            {% for coll in store.featured_collections %}
            <a href="?c={{ coll.label }}" class="category-card">
              <img src="{{ coll.img }}" loading="lazy" alt="{{ coll.label }}" />
              <div class="category-info">
                <h3>{{ coll.label }}</h3>
              </div>
            </a>
            {% endfor %}
          </div>
        </div>
        {% endif %}
      </div>

      <!-- Search Results (shown if query exists) -->
      <div class="search-results" id="search-results" style="display:none;">
        <div class="search-controls">
          <div class="search-filters-section">
            <button class="search-filters-toggle" onclick="toggleSearchFilters()">
              <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <polygon points="22,3 2,3 10,12.46 10,19 14,21 14,12.46"></polygon>
              </svg>
              التصفية
            </button>
            <div class="search-active-filters" id="search-active-filters"></div>
          </div>

          <div class="search-sort-section">
            <label for="search-sort-select">ترتيب حسب:</label>
            <select id="search-sort-select" onchange="handleSortChange(this.value)">
              <option value="relevance">الأكثر صلة</option>
              <option value="price-asc">السعر: من الأقل إلى الأعلى</option>
              <option value="price-desc">السعر: من الأعلى إلى الأقل</option>
              <option value="title-asc">الاسم: أ - ي</option>
              <option value="title-desc">الاسم: ي - أ</option>
              <option value="created-desc">الأحدث</option>
              <option value="created-asc">الأقدم</option>
            </select>
          </div>
        </div>

        <div class="search-content">
          <!-- Results section -->
          <div class="search-results-section">
            <!-- Loading State -->
            <div class="loading-spinner" id="loading-spinner" style="display:none;">
              <div class="spinner"></div>
            </div>

            <!-- Error State -->
            <div class="error-message" id="error-message" style="display:none;">
              حدث خطأ في تحميل المنتجات. يرجى المحاولة مرة أخرى.
            </div>

            <!-- No Results -->
            <div class="no-results" id="no-results" style="display:none;">
              <h3>لم يتم العثور على منتجات</h3>
              <p>جرب تغيير كلمات البحث أو التصفية.</p>
            </div>

            <!-- Products Grid -->
            <div class="products-grid" id="products-grid">
              <!-- Products will be rendered here -->
            </div>

            <!-- Pagination -->
            <div class="pagination" id="pagination" style="display:none;">
              <!-- Pagination will be rendered here -->
            </div>
          </div>
        </div>
      </div>
    </main>

    {% include "footer.liquid" %}
  </div>

  <script>
    // State management
    let currentState = {
      search: '',
      category: '',
      featured: false,
      page: 1,
      limit: 12,
      sort: 'relevance',
      loading: false
    };

    let allProductsState = {
      page: 1,
      limit: 12,
      loading: false
    };

    let totalPages = 0;
    let totalResults = 0;

    let allProductsTotalPages = 0;
    let allProductsTotalResults = 0;

    // Initialize page
    // Initialize page
    document.addEventListener("DOMContentLoaded", function () {
      parseURLParams();
      updateUI();

      if (hasActiveFilters()) {
        loadProducts();
      } else {
        // Load all products when no filters are active
        loadAllProducts();
      }

      // Handle form submission
      document.getElementById('search-form').addEventListener('submit', function (e) {
        e.preventDefault();
        handleSearch();
      });

      // Handle browser back/forward
      window.addEventListener('popstate', function (e) {
        parseURLParams();
        updateUI();
        if (hasActiveFilters()) {
          loadProducts();
        } else {
          loadAllProducts();
        }
      });
    });

    function parseURLParams() {
      const params = new URLSearchParams(window.location.search);
      currentState = {
        search: params.get('s') || '',
        category: params.get('c') || '',
        featured: params.get('f') === 'true',
        page: parseInt(params.get('page')) || 1,
        limit: parseInt(params.get('limit')) || 12,
        sort: params.get('sort') || 'relevance',
        loading: false
      };

      // Parse all products page if no filters active
      if (!hasActiveFilters()) {
        allProductsState.page = parseInt(params.get('page')) || 1;
      }
    }

    function updateURL() {
      const params = new URLSearchParams();

      if (currentState.search) params.set('s', currentState.search);
      if (currentState.category) params.set('c', currentState.category);
      if (currentState.featured) params.set('f', 'true');

      // Use appropriate page based on whether we have filters or showing all products
      const currentPage = hasActiveFilters() ? currentState.page : allProductsState.page;
      if (currentPage > 1) params.set('page', currentPage);

      if (currentState.limit !== 12) params.set('limit', currentState.limit);
      if (currentState.sort !== 'relevance') params.set('sort', currentState.sort);

      const newURL = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
      window.history.pushState({}, '', newURL);
    }
    function hasActiveFilters() {
      return currentState.search || currentState.category || currentState.featured;
    }

    function updateUI() {
      const input = document.getElementById("search-query-input");
      const resultsInfo = document.getElementById("search-results-info");
      const welcome = document.getElementById("search-welcome");
      const suggestions = document.getElementById("search-suggestions");
      const results = document.getElementById("search-results");
      const sortSelect = document.getElementById("search-sort-select");

      if (input) input.value = currentState.search;
      if (sortSelect) sortSelect.value = currentState.sort;

      if (hasActiveFilters()) {
        updateResultsHeader();
        resultsInfo.style.display = "block";
        results.style.display = "block";
        welcome.style.display = "none";
        suggestions.style.display = "none";
      } else {
        resultsInfo.style.display = "none";
        results.style.display = "none";
        welcome.style.display = "block";
        suggestions.style.display = "block";
      }
    }

    function updateResultsHeader() {
      const titleEl = document.getElementById("results-title");
      const countEl = document.getElementById("results-count");

      let title = "نتائج البحث";

      if (currentState.search) {
        title = `نتائج البحث عن "${currentState.search}"`;
      } else if (currentState.category) {
        title = `منتجات فئة "${currentState.category}"`;
      } else if (currentState.featured) {
        title = "المنتجات المميزة";
      }

      titleEl.textContent = title;
      countEl.textContent = totalResults;
    }

    async function loadAllProducts() {
      if (allProductsState.loading) return;

      allProductsState.loading = true;
      showAllProductsLoading();
      hideAllProductsError();

      try {
        const params = new URLSearchParams();
        params.set('page', allProductsState.page);
        params.set('limit', allProductsState.limit);

        const response = await fetch(`/api/v1/products/list?${params.toString()}`);

        if (!response.ok) {
          throw new Error('Failed to fetch products');
        }

        const data = await response.json();

        allProductsTotalResults = data.total || 0;
        allProductsTotalPages = Math.ceil(allProductsTotalResults / allProductsState.limit);

        hideAllProductsLoading();

        if (data.products && data.products.length > 0) {
          renderAllProducts(data.products);
          renderAllProductsPagination();
        }

      } catch (error) {
        console.error('Error loading all products:', error);
        hideAllProductsLoading();
        showAllProductsError();
      } finally {
        allProductsState.loading = false;
      }
    }

    function renderAllProducts(products) {
      const grid = document.getElementById('all-products-grid');
      grid.innerHTML = '';

      products.forEach(product => {
        const productCard = createProductCard(product);
        grid.appendChild(productCard);
      });
    }

    function renderAllProductsPagination() {
      const pagination = document.getElementById('all-products-pagination');

      if (allProductsTotalPages <= 1) {
        pagination.style.display = 'none';
        return;
      }

      pagination.style.display = 'flex';
      pagination.innerHTML = '';

      // Previous button
      const prevBtn = document.createElement('button');
      prevBtn.className = 'pagination-btn';
      prevBtn.textContent = 'السابق';
      prevBtn.disabled = allProductsState.page === 1;
      prevBtn.onclick = () => changeAllProductsPage(allProductsState.page - 1);
      pagination.appendChild(prevBtn);

      // Page numbers
      const startPage = Math.max(1, allProductsState.page - 2);
      const endPage = Math.min(allProductsTotalPages, allProductsState.page + 2);

      if (startPage > 1) {
        const firstBtn = document.createElement('button');
        firstBtn.className = 'pagination-btn';
        firstBtn.textContent = '1';
        firstBtn.onclick = () => changeAllProductsPage(1);
        pagination.appendChild(firstBtn);

        if (startPage > 2) {
          const dots = document.createElement('span');
          dots.className = 'pagination-dots';
          dots.textContent = '...';
          pagination.appendChild(dots);
        }
      }

      for (let i = startPage; i <= endPage; i++) {
        const btn = document.createElement('button');
        btn.className = 'pagination-btn';
        btn.textContent = i;
        if (i === allProductsState.page) {
          btn.classList.add('active');
        }
        btn.onclick = () => changeAllProductsPage(i);
        pagination.appendChild(btn);
      }

      if (endPage < allProductsTotalPages) {
        if (endPage < allProductsTotalPages - 1) {
          const dots = document.createElement('span');
          dots.className = 'pagination-dots';
          dots.textContent = '...';
          pagination.appendChild(dots);
        }

        const lastBtn = document.createElement('button');
        lastBtn.className = 'pagination-btn';
        lastBtn.textContent = allProductsTotalPages;
        lastBtn.onclick = () => changeAllProductsPage(allProductsTotalPages);
        pagination.appendChild(lastBtn);
      }

      // Next button
      const nextBtn = document.createElement('button');
      nextBtn.className = 'pagination-btn';
      nextBtn.textContent = 'التالي';
      nextBtn.disabled = allProductsState.page === allProductsTotalPages;
      nextBtn.onclick = () => changeAllProductsPage(allProductsState.page + 1);
      pagination.appendChild(nextBtn);
    }

    function changeAllProductsPage(page) {
      if (page < 1 || page > allProductsTotalPages || page === allProductsState.page) return;

      allProductsState.page = page;
      updateURL();
      loadAllProducts();
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }

    // UI State Functions for All Products
    function showAllProductsLoading() {
      document.getElementById('all-products-loading').style.display = 'flex';
      document.getElementById('all-products-grid').style.display = 'none';
      document.getElementById('all-products-pagination').style.display = 'none';
    }

    function hideAllProductsLoading() {
      document.getElementById('all-products-loading').style.display = 'none';
      document.getElementById('all-products-grid').style.display = 'grid';
    }

    function showAllProductsError() {
      document.getElementById('all-products-error').style.display = 'block';
      document.getElementById('all-products-grid').style.display = 'none';
      document.getElementById('all-products-pagination').style.display = 'none';
    }

    function hideAllProductsError() {
      document.getElementById('all-products-error').style.display = 'none';
    }

    async function loadProducts() {
      if (currentState.loading) return;

      currentState.loading = true;
      showLoading();
      hideError();
      hideNoResults();

      try {
        const params = new URLSearchParams();
        params.set('page', currentState.page);
        params.set('limit', currentState.limit);

        if (currentState.search) params.set('search', currentState.search);
        if (currentState.category) params.set('category', currentState.category);
        if (currentState.featured) params.set('featured', 'true');

        const response = await fetch(`/api/v1/products/list?${params.toString()}`);

        if (!response.ok) {
          throw new Error('Failed to fetch products');
        }

        const data = await response.json();

        totalResults = data.total || 0;
        totalPages = Math.ceil(totalResults / currentState.limit);

        hideLoading();

        if (data.products && data.products.length > 0) {
          renderProducts(data.products);
          renderPagination();
          updateResultsHeader();
        } else {
          showNoResults();
        }

      } catch (error) {
        console.error('Error loading products:', error);
        hideLoading();
        showError();
      } finally {
        currentState.loading = false;
      }
    }

    function renderProducts(products) {
      const grid = document.getElementById('products-grid');
      grid.innerHTML = '';

      products.forEach(product => {
        const productCard = createProductCard(product);
        grid.appendChild(productCard);
      });
    }

    function createProductCard(product) {
      const card = document.createElement('div');
      card.className = 'product-card';

      // Get first variant for price
      const variant = product.variants && product.variants[0];
      const hasImages = product.images && product.images.length > 0;
      const hasDiscount = variant && variant.compare_at && variant.compare_at > variant.price;

      // Calculate discount percentage
      let discountPercent = 0;
      if (hasDiscount) {
        discountPercent = Math.round(((variant.compare_at - variant.price) / variant.compare_at) * 100);
      }

      card.innerHTML = `
        <a href="/products/${product.slug}">
          <div class="product-image">
            ${hasImages ? `
              <img src="${product.images[0]}" alt="${product.title}" loading="lazy">
              ${hasDiscount ? '<span class="product-badge sale-badge">تخفيض</span>' : ''}
            ` : `
              <div class="no-image">
                <svg class="no-image-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                  <circle cx="8.5" cy="8.5" r="1.5"></circle>
                  <polyline points="21,15 16,10 5,21"></polyline>
                </svg>
                <span>لا توجد صورة</span>
              </div>
            `}
          </div>
        </a>
        <div class="product-info">
          ${product.category ? `<span class="product-category">${product.category}</span>` : ''}
          <h3 class="product-title">
            <a href="/products/${product.slug}">${product.title}</a>
          </h3>
          ${product.description ? `<p class="product-description">${truncateText(product.description, 80)}</p>` : ''}
          <div class="product-price">
            <span class="current-price">DZD ${variant ? variant.price : '0'}</span>
            ${hasDiscount ? `
              <span class="compare-price">DZD ${variant.compare_at}</span>
              <span class="discount-percent">-${discountPercent}%</span>
            ` : ''}
          </div>
          <button type="button" class="product-btn" onclick="addToCart('${product.id}')">أضف إلى السلة</button>
        </div>
      `;

      return card;
    }

    function truncateText(text, length) {
      if (text.length <= length) return text;
      return text.substring(0, length).trim() + '...';
    }

    function renderPagination() {
      const pagination = document.getElementById('pagination');

      if (totalPages <= 1) {
        pagination.style.display = 'none';
        return;
      }

      pagination.style.display = 'flex';
      pagination.innerHTML = '';

      // Previous button
      const prevBtn = document.createElement('button');
      prevBtn.className = 'pagination-btn';
      prevBtn.textContent = 'السابق';
      prevBtn.disabled = currentState.page === 1;
      prevBtn.onclick = () => changePage(currentState.page - 1);
      pagination.appendChild(prevBtn);

      // Page numbers
      const startPage = Math.max(1, currentState.page - 2);
      const endPage = Math.min(totalPages, currentState.page + 2);

      if (startPage > 1) {
        const firstBtn = document.createElement('button');
        firstBtn.className = 'pagination-btn';
        firstBtn.textContent = '1';
        firstBtn.onclick = () => changePage(1);
        pagination.appendChild(firstBtn);

        if (startPage > 2) {
          const dots = document.createElement('span');
          dots.className = 'pagination-dots';
          dots.textContent = '...';
          pagination.appendChild(dots);
        }
      }

      for (let i = startPage; i <= endPage; i++) {
        const btn = document.createElement('button');
        btn.className = 'pagination-btn';
        btn.textContent = i;
        if (i === currentState.page) {
          btn.classList.add('active');
        }
        btn.onclick = () => changePage(i);
        pagination.appendChild(btn);
      }

      if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
          const dots = document.createElement('span');
          dots.className = 'pagination-dots';
          dots.textContent = '...';
          pagination.appendChild(dots);
        }

        const lastBtn = document.createElement('button');
        lastBtn.className = 'pagination-btn';
        lastBtn.textContent = totalPages;
        lastBtn.onclick = () => changePage(totalPages);
        pagination.appendChild(lastBtn);
      }

      // Next button
      const nextBtn = document.createElement('button');
      nextBtn.className = 'pagination-btn';
      nextBtn.textContent = 'التالي';
      nextBtn.disabled = currentState.page === totalPages;
      nextBtn.onclick = () => changePage(currentState.page + 1);
      pagination.appendChild(nextBtn);
    }

    function changePage(page) {
      if (page < 1 || page > totalPages || page === currentState.page) return;

      currentState.page = page;
      updateURL();
      loadProducts();
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }

    function handleSearch() {
      const input = document.getElementById('search-query-input');
      currentState.search = input.value.trim();
      currentState.page = 1; // Reset to first page
      allProductsState.page = 1; // Also reset all products page
      updateURL();
      updateUI();
      if (currentState.search) {
        loadProducts();
      } else {
        loadAllProducts();
      }
    }

    function handleSortChange(sortValue) {
      currentState.sort = sortValue;
      currentState.page = 1; // Reset to first page
      updateURL();
      loadProducts();
    }

    // UI State Functions
    function showLoading() {
      document.getElementById('loading-spinner').style.display = 'flex';
      document.getElementById('products-grid').style.display = 'none';
      document.getElementById('pagination').style.display = 'none';
    }

    function hideLoading() {
      document.getElementById('loading-spinner').style.display = 'none';
      document.getElementById('products-grid').style.display = 'grid';
    }

    function showError() {
      document.getElementById('error-message').style.display = 'block';
      document.getElementById('products-grid').style.display = 'none';
      document.getElementById('pagination').style.display = 'none';
    }

    function hideError() {
      document.getElementById('error-message').style.display = 'none';
    }

    function showNoResults() {
      document.getElementById('no-results').style.display = 'block';
      document.getElementById('products-grid').style.display = 'none';
      document.getElementById('pagination').style.display = 'none';
    }

    function hideNoResults() {
      document.getElementById('no-results').style.display = 'none';
    }

    function toggleSearchFilters() {
      const sidebar = document.getElementById('search-filters-sidebar');
      if (sidebar) {
        sidebar.classList.toggle('active');
      }
    }

    function addToCart(productId) {
      // Implement add to cart functionality
      console.log('Add to cart:', productId);
    }
  </script>
</body>

</html>